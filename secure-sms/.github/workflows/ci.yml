name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Lint (flake8)
        run: flake8

      - name: Run tests with coverage (pytest)
        run: pytest -q --maxfail=1 --disable-warnings --cov=app --cov-report=xml

  sast-sonar:
    runs-on: ubuntu-latest
    needs: build-test-lint
    if: ${{ secrets.SONAR_TOKEN != '' }}
    steps:
      - name: Checkout (full history for blame/branches)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.qualitygate.wait=true

  secrets-scan:
    runs-on: ubuntu-latest
    needs: build-test-lint
    steps:
      - name: Checkout (full history for scanning)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog-actions-scan@v0.20.4
        with:
          scanArguments: --only-verified

  sca-deps:
    runs-on: ubuntu-latest
    needs: build-test-lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Run pip-audit (requirements.txt)
        run: |
          pip-audit -r requirements.txt

  dast-zap:
    runs-on: ubuntu-latest
    needs: build-test-lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install app deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start Flask app (background)
        env:
          FLASK_ENV: production
          SECRET_KEY: test_secret_key
          JWT_SECRET_KEY: test_jwt_key
          ENCRYPTION_KEY: "bXktdGVzdC1lbmNyeXB0aW9uLWtleS1mb3ItZGVtby0xMjM0NTY3ODkwMTIzNA=="
        run: |
          nohup python run.py >/dev/null 2>&1 &
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/)
            if [ "$code" = "200" ] || [ "$code" = "302" ]; then
              echo "App is up with HTTP $code"
              break
            fi
            echo "Waiting for app to start... ($i)"
            sleep 2
          done

      - name: ZAP Baseline Scan (localhost)
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -m 5'
          allow_issue_writing: false
          fail_action: true
          report_file_name: 'zap-baseline-report.html'

      - name: Upload ZAP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-report
          path: zap-baseline-report.html

      - name: Upload app logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-logs
          path: logs/*.log
          if-no-files-found: ignore
